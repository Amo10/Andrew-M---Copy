import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Random;
import  sun.audio.*;
import  java.io.*;
import javax.sound.sampled.*;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;


public class GamePanel extends JPanel implements ActionListener, KeyListener {

	private int x;//x pattel cordent
	private int y;//y pattel cordent
	private int a = 150;//x were the ball starts
	private int b = 200;//y were the ball starts
	private int c = 2;//x speed for ball
	private int d = 2;//y speed for ball
	private int numberBricks = 32;
	Brick[][] joe = new Brick[8][4];
	BrickArray v = new BrickArray();
	
	
	Timer t;
	Random r;

	public GamePanel(){
		super();
		this.setPreferredSize(new Dimension(420, 350));
		this.setFocusable(true);
		this.grabFocus();
		this.addKeyListener(this);
		setBackground(Color.black);
		initializeBricks();
		
		r = new Random(System.currentTimeMillis());
		t = new Timer(10, this);
		t.start();

		x = 0;
		y= 335;
	}

	public void paint(Graphics g){
		g.setColor(new Color (255,108,218));
		
		super.paintComponent(g);
		g.setFont(new Font("Default",Font.PLAIN,50));
		g.setColor(Color.WHITE);
		g.drawString(Integer.toString(numberBricks) ,320,70);
		g.setFont(new Font("Default",Font.PLAIN,25));
		g.drawString("Bricks",313,90);
		g.setFont(new Font("Default",Font.PLAIN,25));
		g.drawString("Remaining",283,110);
		
		g.fill3DRect(x, y, 100, 12,true);
		for (int i=0; i < joe.length; i++){
			for (int e=0; e < joe[i].length; e++){
				if(joe[i][e].getTimesHit()==0){
					g.setColor(joe[i][e].getBrickColor());
					g.fill3DRect(joe[i][e].getX(),joe[i][e].getY(),joe[i][e].getWidth(),joe[i][e].getHeight(),true);
				}
			}		
		}
		g.setColor(Color.red);
		g.fillOval(a, b, 15, 15);
		
	}
	public void initializeBricks(){
		v.fbf(joe);
	}
	
	public void endGame(String message){
		t.stop();
		JOptionPane.showMessageDialog(this, message);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		a-=c;
		b+=d;
		if (collision(a,b,15,15,x,y,100,12)){
			d=-2;
			try{
				
				AudioInputStream stream = AudioSystem.getAudioInputStream(new File("C:\\Documents and Settings\\Student\\workspace\\Game\\src\\Boing.wav"));
				AudioFormat format = stream.getFormat();
				DataLine.Info info = new DataLine.Info(Clip.class, stream.getFormat());
				Clip clip = (Clip) AudioSystem.getLine(info);
				clip.open(stream);
				clip.start();
			}catch (Exception event){
				event.printStackTrace();
				System.out.println("didn't find it");
		}
	}
		else if (collision(a,b,15,15,0,0,10,350)){
			c*=-1;
		}
		else if (collision(a,b,15,15,300,0,10,350)){
			c*=-1;
		}
		else if (collision(a,b,15,15,0,0,300,10)){
			d*=-1;
		}
		else if (collision(a,b,15,15,0,350,300,10)){
			endGame("You Lose");
			initializeBricks();
			a = 150;
			b = 200;
			c = 2;
			d = 2;
			x = 0;
			y= 335;
			t.start();
		}
		for (int i=0; i < joe.length; i++){
			for (int j=0; j < joe[i].length; j++){
				if (joe[i][j].getTimesHit()==0 && collision(a,b,15,15,joe[i][j].getX(),joe[i][j].getY()-13,joe[i][j].getHeight(),joe[i][j].getWidth())){
					try{
						
						AudioInputStream stream = AudioSystem.getAudioInputStream(new File("C:\\Documents and Settings\\Student\\workspace\\Game\\src\\bricksfall.wav"));
						AudioFormat format = stream.getFormat();
						DataLine.Info info = new DataLine.Info(Clip.class, stream.getFormat());
						Clip clip = (Clip) AudioSystem.getLine(info);
						clip.open(stream);
						clip.start();
					}catch (Exception event){
						event.printStackTrace();
						
					} 
					joe[i][j].incrementHit();
					numberBricks--;
					d*=-1;
					break;
				}
			}
		}
		if (numberBricks ==0){
			try{
				
				AudioInputStream stream = AudioSystem.getAudioInputStream(new File("C:\\Documents and Settings\\Student\\workspace\\Game\\src\\horn.wav"));
				AudioFormat format = stream.getFormat();
				DataLine.Info info = new DataLine.Info(Clip.class, stream.getFormat());
				Clip clip = (Clip) AudioSystem.getLine(info);
				clip.open(stream);
				clip.start();
				endGame("You win");
				numberBricks = 32;
				initializeBricks();
				a = 150;
				b = 200;
				c = 2;
				d = 2;
				x = 0;
				y= 335;
				t.start();
			}catch (Exception event){
				event.printStackTrace();
			
			
				
		}
	}
		repaint();
	}

	@Override
	public void keyPressed(KeyEvent arg0) {
		int key = arg0.getKeyCode();
		//System.out.println(key);
		if(key == KeyEvent.VK_LEFT && x>0){
			x-=14;
		}else if(key == KeyEvent.VK_RIGHT && x<200){
			x+=14;
		//}else if(key == KeyEvent.VK_UP){
			//y-=0;
		//}else if(key == KeyEvent.VK_DOWN){
		//	y+=0;
			
		}
	}
	
	

	@Override
	public void keyReleased(KeyEvent arg0) {} // Do nothing
	@Override
	public void keyTyped(KeyEvent arg0) {} // Do nothing
	
	public boolean collision(int x1, int y1, int width1,
            int height1, int x2, int y2, int width2,
            int height2) {
        if (x1 > x2 && x1 < x2 + width2
                && y1 > y2 && y1 < y2 + height2) {
            return true;
        } else if (x1 + width1 > x2
                && x1 + width1 < x2 + width2 && y1 > y2
                && y1 < y2 + height2) {
            return true;
        } else if (x1 > x2 && x1 < x2 + width2
                && y1 + height1 > y2
                && y1 + height1 < y2 + height2) {
            return true;
        } else if (x1 + width1 > x2
                && x1 + width1 < x2 + width2
                && y1 + height1 > y2
                && y1 + height1 < y2 + height2) {
            return true;
        } else if (x2 > x1 && x2 < x1 + width1
                && y2 > y1 && y2 < y1 + height1) {
            return true;
        } else if (x2 + width2 > x1
                && x2 + width2 < x1 + width1 && y2 > y1
                && y2 < y1 + height1) {
            return true;
        } else if (x2 > x1 && x2 < x1 + width1
                && y2 + height2 > y1
                && y2 + height2 < y1 + height1) {
            return true;
        } else if (x2 + width2 > x1
                && x2 + width2 < x1 + width1
                && y2 + height2 > y1
                && y2 + height2 < y1 + height1) {
            return true;
        }
        return false;
    }
}
